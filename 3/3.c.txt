#include <stdio.h>
#include <string.h>

typedef struct process {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
} Process;

void shortestJobFirst(Process processes[], int n) {
    int time = 0;
    while (1) {
        int min = -1;
        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= time && processes[i].remaining_time > 0 &&
                (min == -1 || processes[i].remaining_time < processes[min].remaining_time)) {
                min = i;
            }
        }
        if (min == -1) break;
        printf("Processing PID %d\n", processes[min].pid);
        processes[min].remaining_time--;
        time++;
    }
}

void roundRobin(Process processes[], int n, int quantum) {
    int time = 0;
    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                done = 0;
                if (processes[i].remaining_time > quantum) {
                    time += quantum;
                    processes[i].remaining_time -= quantum;
                } else {
                    time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                }
                printf("Processing PID %d\n", processes[i].pid);
            }
        }
        if (done) break;
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    Process processes[n];
    for (int i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d%d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].remaining_time = processes[i].burst_time;
    }
    Process processes_copy1[n];
    memcpy(processes_copy1, processes, n * sizeof(Process));
    printf("Shortest Job First (Preemptive):\n");
    shortestJobFirst(processes_copy1, n);
    Process processes_copy2[n];
    memcpy(processes_copy2, processes, n * sizeof(Process));
    printf("Round Robin:\n");
    int quantum;
    printf("Enter quantum: ");
    scanf("%d", &quantum);
    roundRobin(processes_copy2, n, quantum);
/*
    total_turnaround_time = 0;
    total_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        total_turnaround_time += processes_copy2[i].completion_time - processes_copy2[i].arrival_time;
        total_waiting_time += total_turnaround_time - processes_copy2[i].burst_time;
    }
    printf("Total turnaround time: %d\n", total_turnaround_time);
    printf("Total waiting time: %d\n", total_waiting_time);
*/
    return 0;
}

