#include <stdio.h>
#include <string.h>

#define N 5
#define M 3

int main() {
    int allocation[N][M] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };
    int maxDemand[N][M] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };
    int availableResources[M] = {3, 3, 2};
    int finished[N], safeSequence[N], index = 0;

    memset(finished, 0, sizeof(finished));

    int need[N][M];
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < M; j++) {
            need[i][j] = maxDemand[i][j] - allocation[i][j];
        }
    }

    for (int k = 0; k < N; k++) {
        for (int i = 0; i < N; i++) {
            if (finished[i] == 0) {
                int flag = 0;
                for (int j = 0; j < M; j++) {
                    if (need[i][j] > availableResources[j]) {
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0) {
                    safeSequence[index++] = i;
                    for (int j = 0; j < M; j++) {
                        availableResources[j] += allocation[i][j];
                    }
                    finished[i] = 1;
                }
            }
        }
    }

    printf("Following is the SAFE Sequence\n");
    for (int i = 0; i < N - 1; i++) {
        printf(" P%d ->", safeSequence[i]);
    }
    printf(" P%d\n", safeSequence[N - 1]);

    return 0;
}
