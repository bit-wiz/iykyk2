#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

pthread_mutex_t mutex;
pthread_cond_t cond;
int data = 0;
int readerCount = 0;

void *reader(void *param) {
   int id = *((int *) param);

   int c = 0;
   while (1) {
       pthread_mutex_lock(&mutex);
       readerCount++;
       if (readerCount == 1) {
           printf("Reader %d is reading\n", id);
           printf("Data read by reader %d is %d\n", id, data);
       	   c++;
       	   printf("%d", c);
       
       }
       pthread_mutex_unlock(&mutex);
       sleep(1);
       pthread_mutex_lock(&mutex);
       readerCount--;
       if (readerCount == 0) {
           pthread_cond_signal(&cond);
       }
       pthread_mutex_unlock(&mutex);
       sleep(1);

     //  if(c >= 6) {break;}
   }
}

void *writer(void *param) {
   int id = *((int *) param);
   while (1) {
       pthread_mutex_lock(&mutex);
       if (readerCount == 0) {
           data++;
           printf("Data written by writer %d is %d\n", id, data);
       } else {
           pthread_cond_wait(&cond, &mutex);
       }
       pthread_mutex_unlock(&mutex);
       sleep(1);
   }
}

int main() {
   int i;
   int ids[0];
   pthread_t readerThreads[0];
   pthread_t writerThreads[0];
   pthread_mutex_init(&mutex, NULL);
   pthread_cond_init(&cond, NULL);

   for (i = 0; i < 5; i++) {
       ids[i] = i + 1;
       pthread_create(&readerThreads[i], NULL, reader, &ids[i]);
       pthread_create(&writerThreads[i], NULL, writer, &ids[i]);
   }

   for (i = 0; i < 5; i++) {
       pthread_join(readerThreads[i], NULL);
       pthread_join(writerThreads[i], NULL);
   }

   pthread_mutex_destroy(&mutex);
   pthread_cond_destroy(&cond);

   return 0;
}

